新建DriverSchool数据库以后
把credb.sql执行生成表
把initdata.sql执行生成初始数据

...还是不要把这个文件夹当做vs编辑的文件夹了，工程目录自己选地方，写完了代码就把工程和代码文件夹贴过来（不要.vs，因为就是这个东西容易出错，谁也不知道是什么内容，冲突了也改不了。）!!!!!!!!!!!!!!!!!!!!自己要有备份

管理员：
管理员也是一张表，不过与其他表没有任何关系。在数据库里新建4个角色，用SQL身份验证，分别代表3个部门和一个全能的管理员，为他们分配各自的职权。在管理员表里有一个属性，表示职权大小，1为后勤，2为财务，3为运营，4为总管理员(dbowner)，用户登录的时候输入的是这个表里的管理员名字和密码，进入系统后，根据这个管理员里的权限1234，前台程序显示指定的内容，并且数据库也以特定的SQL身份进行操作。比如4对应数据库角色tsy，3对应数据库角色test3.（也就是前台后台双重保险，保障安全性）。

数据库里是叫角色，表里的才是管理员，一个角色对应多个管理员。



编码要求：

1.变量命名：
	主要是窗体的部件元素，起名字一定要按照功能来取。比如信息更新的panel，起名可以取“updatePanel”或者“信息更新panel”，其中的学生更新取如“update_sname_textbox”(输入学生姓名的文本框),“s_up_botton”（点击确认的按钮）。

2.注释：每个函数前面要有注释。至少包括：时间，编写人，功能。

3.如果复用比较多的函数可以另外写个c#文件，再引用之即可。

4.写代码在自己的branch上面操作，操作完了再合并到master，可能会有冲突，因为其他人也在改，那么就要手动把错误消除，注意不要把别人改好的代码删了。所以为了防止队友把自己的代码删了，一定要写注释，也就是第二条说的，时间编写人功能。没有的就视为系统产生的垃圾，可以删了。

5.尽量减少文本框，转而添加大量下拉菜单。

6.出错需要有响应。

7.在修改之前，先创建一个branch，不要直接修改master分支。这样会出问题。


因此，多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。



git 简要说明

首先把工程从远程库拷贝下来。
git clone git@github.com:Britang1997/DriverSchoolManagementSystem.git

然后你就有这个工程了。当然我要先给你发合作请求你接受才行。

然后日常工作就是,跑到工程目录下面右键git bash here
然后 git pull
然后 git chechout -b yeyukuan(这个名字随便取，就取自己名字好了，为免重复可以git branch 先看一下现在有哪些分支。)

然后写代码....

写完了再到工程目录下（就是有.git文件夹的目录下）,git add .(附加所有修改)
你也可以 git status 看一看有哪些修改
然后git commit -m "这是一些注释" 
git checkout master
git merge yeyukuan
然后git push origin master.如果失败了，说明有人比你先交了，那么你要git pull自己合并一下。然后再交。